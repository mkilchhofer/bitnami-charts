{{- if and .Values.contour.enabled .Values.certgen.enabled }}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "common.names.fullname" . }}-contour-certgen
  labels: {{- include "common.labels.standard" . | nindent 4 }}
    app.kubernetes.io/component: contour-certgen
spec:
  ttlSecondsAfterFinished: 0
  template:
    metadata:
      labels: {{- include "common.labels.standard" . | nindent 8 }}
        app.kubernetes.io/component: contour-certgen
    spec:
      {{- include "common.images.pullSecrets" ( dict "images" (list .Values.certgen.image) "global" .Values.global) | nindent 6 }}
      {{- if .Values.certgen.nodeSelector }}
      nodeSelector: {{- include "common.tplvalues.render" (dict "value" .Values.certgen.nodeSelector "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.certgen.affinity }}
      affinity: {{- include "common.tplvalues.render" (dict "value" .Values.certgen.affinity "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.certgen.tolerations}}
      tolerations: {{- include "common.tplvalues.render" (dict "value" .Values.certgen.tolerations "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.certgen.initContainers }}
      initContainers:
        {{- include "common.tplvalues.render" ( dict "value" .Values.certgen.initContainers "context" $ ) | nindent 6 }}
      {{- end }}
      containers:
      - name: contour
        image: {{ include "common.images.image" ( dict "imageRoot" .Values.certgen.image "global" .Values.global) }}
        imagePullPolicy: {{ .Values.certgen.image.pullPolicy }}
        command:
        - contour
        args:
        - certgen
        - --kube
        - --incluster
        - --overwrite
        - --secrets-format=compact
        - --namespace=$(CONTOUR_NAMESPACE)
        env:
        - name: CONTOUR_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        {{- if .Values.certgen.extraEnvVars }}
          {{- include "common.tplvalues.render" (dict "value" .Values.certgen.extraEnvVars "context" $) | nindent 8 }}
        {{- end }}
        {{- if or .Values.certgen.extraEnvVarsConfigMap .Values.certgen.extraEnvVarsSecret }}
        envFrom:
          {{- if .Values.certgen.extraEnvVarsConfigMap }}
          - configMapRef:
              name: {{ include "common.tplvalues.render" ( dict "value" .Values.certgen.extraEnvVarsConfigMap "context" $ ) }}
          {{- end }}
          {{- if .Values.certgen.extraEnvVarsSecret }}
          - secretRef:
              name: {{ include "common.tplvalues.render" ( dict "value" .Values.certgen.extraEnvVarsSecret "context" $ ) }}
          {{- end }}
        {{- end }}
        resources:
{{ toYaml .Values.certgen.resources | indent 10 }}
      restartPolicy: Never
      serviceAccountName: {{ include "contour.contourCertGenServiceAccountName" . }}
      {{- if .Values.certgen.securityContext.enabled }}
      securityContext:
        runAsUser: {{ .Values.certgen.securityContext.runAsUser }}
        runAsGroup: {{ .Values.certgen.securityContext.runAsGroup }}
        fsGroup: {{ .Values.certgen.securityContext.fsGroup }}
        runAsNonRoot: {{ .Values.certgen.securityContext.runAsNonRoot }}
      {{- end }}
  parallelism: 1
  completions: 1
  backoffLimit: 1
{{- end }}
